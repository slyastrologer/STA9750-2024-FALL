[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Slyastrologer’s website",
    "section": "",
    "text": "Slyastrologer is a master’s student studying Business Analytics at Baruch College in New York City. Slyastrologer enjoys doing photography, playing tennis, and traveling. Previously, Slyastrologer worked in data analytics across several agencies within the City of New York. Slyastrologer is always looking for new connections, and can be found at his linkedin here."
  },
  {
    "objectID": "MiniProject2.html",
    "href": "MiniProject2.html",
    "title": "MiniProject2",
    "section": "",
    "text": "library(dplyr) library(tidyverse) library(ggplot2) library(stringr)\nget_imdb_file &lt;- function(fname){ BASE_URL &lt;- “https://datasets.imdbws.com/” fname_ext &lt;- paste0(fname, “.tsv.gz”) if(!file.exists(fname_ext)){ FILE_URL &lt;- paste0(BASE_URL, fname_ext) download.file(FILE_URL, destfile = fname_ext) } as.data.frame(readr::read_tsv(fname_ext, lazy=FALSE)) }\nNAME_BASICS &lt;- get_imdb_file(“name.basics”) TITLE_BASICS &lt;- get_imdb_file(“title.basics”) TITLE_EPISODES &lt;- get_imdb_file(“title.episode”) TITLE_RATINGS &lt;- get_imdb_file(“title.ratings”) TITLE_CREW &lt;- get_imdb_file(“title.crew”) TITLE_PRINCIPALS &lt;- get_imdb_file(“title.principals”)\nNAME_BASICS &lt;- NAME_BASICS |&gt; filter(str_count(knownForTitles, “,”) &gt; 1)\nTITLE_RATINGS |&gt; ggplot(aes(x=numVotes)) + geom_histogram(bins=30) + xlab(“Number of IMDB Ratings”) + ylab(“Number of Titles”) + ggtitle(“Majority of IMDB Titles Have Less than 100 Ratings”) + theme_bw() + scale_x_log10(label=scales::comma) + scale_y_continuous(label=scales::comma)\nTITLE_RATINGS |&gt; pull(numVotes) |&gt; quantile()\nTITLE_RATINGS &lt;- TITLE_RATINGS |&gt; filter(numVotes &gt;= 100)\nTITLE_BASICS &lt;- TITLE_BASICS |&gt; semi_join(TITLE_RATINGS, join_by(tconst == tconst))\nTITLE_CREW &lt;- TITLE_CREW |&gt; semi_join(TITLE_RATINGS, join_by(tconst == tconst))\nTITLE_EPISODES_1 &lt;- TITLE_EPISODES |&gt; semi_join(TITLE_RATINGS, join_by(tconst == tconst)) TITLE_EPISODES_2 &lt;- TITLE_EPISODES |&gt; semi_join(TITLE_RATINGS, join_by(parentTconst == tconst))\nTITLE_EPISODES &lt;- bind_rows(TITLE_EPISODES_1, TITLE_EPISODES_2) |&gt; distinct()\nTITLE_PRINCIPALS &lt;- TITLE_PRINCIPALS |&gt; semi_join(TITLE_RATINGS, join_by(tconst == tconst))\nrm(TITLE_EPISODES_1) rm(TITLE_EPISODES_2)\nNAME_BASICS &lt;- NAME_BASICS |&gt; mutate(birthYear = as.numeric(birthYear), deathYear = as.numeric(deathYear))\n#Task 1: Column Type Correction TITLE_BASICS &lt;- TITLE_BASICS |&gt; mutate(startYear = as.numeric(startYear), endYear = as.numeric(endYear), runtimeMinutes = as.numeric(runtimeMinutes), isAdult = as.logical(isAdult)) TITLE_EPISODES &lt;- TITLE_EPISODES |&gt; mutate(seasonNumber = as.numeric(seasonNumber), episodeNumber = as.numeric(episodeNumber))\nNAME_BASICS |&gt; separate_longer_delim(knownForTitles, “,”) |&gt; slice_head(n=10)\n#Task 2: Instructor-Provided Questions movies &lt;- TITLE_BASICS |&gt; count(titleType) |&gt; filter(titleType == “movie”) print(movies) tvSeries &lt;- TITLE_BASICS |&gt; count(titleType) |&gt; filter(titleType == “tvSeries”) print(tvSeries) tvEpisodes &lt;- TITLE_BASICS |&gt; count(titleType) |&gt; filter(titleType == “tvEpisode”) print(tvEpisodes)\noldestLiving &lt;- NAME_BASICS |&gt; filter(birthYear &gt; 1917, is.na(deathYear)) |&gt; arrange(birthYear) |&gt; slice(1) print(oldestLiving)\nperfectRating &lt;- merge(TITLE_BASICS, TITLE_RATINGS, by = “tconst”) |&gt; filter(titleType == “tvEpisode”, averageRating == 10, numVotes &gt;= 200000) print(perfectRating)\nmarkHamill &lt;- NAME_BASICS |&gt; filter(primaryName == “Mark Hamill”) |&gt; separate_longer_delim(knownForTitles, “,”) |&gt; slice_head(n=4) |&gt; rename(“tconst” = “knownForTitles”) markHamilltop4 &lt;- merge(markHamill, TITLE_BASICS, by = “tconst”) |&gt; slice_head(n=4) print(markHamilltop4)\nhighestAvgRate &lt;- full_join(TITLE_EPISODES, TITLE_RATINGS, by = “tconst”) |&gt; group_by(parentTconst) |&gt; summarise(num_episodes = n(), avg_rating = mean(averageRating, na.rm = TRUE)) |&gt; filter(num_episodes &gt; 12) |&gt; arrange(desc(avg_rating)) |&gt; rename(“tconst” = “parentTconst”) highestAvgRateName &lt;- full_join(highestAvgRate, TITLE_BASICS, by = “tconst”) |&gt; slice_head(n=1) print(highestAvgRateName)\n#Task 3: Custom Success Metric TITLE_RATINGS &lt;- TITLE_RATINGS |&gt; mutate(successRating = numVotes/averageRating)\ntop5SuccessfulMovies &lt;- TITLE_RATINGS |&gt; inner_join(TITLE_BASICS, by = “tconst”) |&gt; filter(titleType == “movie”) |&gt; arrange(desc(successRating)) |&gt; slice_head(n = 5) |&gt; print()\ntop5UnsuccessfulMovies &lt;- TITLE_RATINGS |&gt; inner_join(TITLE_BASICS, by = “tconst”) |&gt; filter(titleType == “movie”, successRating &lt; 1000, numVotes &gt; 8000) |&gt; arrange(desc(successRating)) |&gt; slice_tail(n = 5) |&gt; print()\n#Task 4: Trends in Success Over Time success_threshold &lt;- 1000 TITLE_BASICS &lt;- TITLE_BASICS |&gt; separate_longer_delim(genres, “,”) title_decades &lt;- full_join(TITLE_BASICS, TITLE_RATINGS, by = “tconst”) |&gt; mutate(decade = floor(startYear / 10) * 10) success_counts &lt;- title_decades |&gt; filter(successRating &gt; success_threshold) |&gt; group_by(decade, genres) |&gt; summarise(success_count = n(), .groups = ‘drop’) most_successful_genres &lt;- success_counts |&gt; group_by(decade) |&gt; slice_max(success_count, n = 1, with_ties = FALSE) |&gt; ungroup() ggplot(success_counts, aes(x = decade, y = success_count, fill = genres)) + geom_bar(stat = “identity”, position = “stack”) + labs(title = “Successful Movies by Decade and Genre”, x = “Decade”, y = “Success Count”, fill = “Genre”) + theme_minimal()\nsuccess_threshold &lt;- 1000 TITLE_MOVIES &lt;- TITLE_BASICS |&gt; full_join(TITLE_RATINGS) |&gt; filter(titleType == “movie”) consistent_genres &lt;- TITLE_MOVIES |&gt; group_by(genres) |&gt; summarise(avg_score = mean(successRating), .groups = ‘drop’) |&gt; filter(avg_score &gt; success_threshold) |&gt; arrange(desc(avg_score)) |&gt; print() ggplot(consistent_genres, aes(x = genres, y = avg_score)) + geom_bar(stat = “identity”) + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + labs(title = “Most Successful Movie Genres”, x = “Genre”, y = “Average Score”)\n#Task 5: Key Personnel directors &lt;- NAME_BASICS |&gt; separate_longer_delim(primaryProfession, “,”) |&gt; separate_longer_delim(knownForTitles, “,”) |&gt; filter(primaryProfession == “director”) |&gt; filter(!is.na(birthYear), is.na(deathYear)) |&gt; rename(“tconst” = “knownForTitles”) |&gt; select(primaryName, birthYear, deathYear, tconst) sci_fi &lt;- TITLE_BASICS |&gt; filter(titleType == “movie” & genres == “Sci-Fi”) |&gt; select(tconst, primaryTitle, startYear, endYear) sci_fiDirectors &lt;- inner_join(sci_fi, directors, by = “tconst”) sci_fiDirectorsScores &lt;- sci_fiDirectors |&gt; left_join(TITLE_RATINGS |&gt; select(tconst, successRating), by = “tconst”) success_threshold &lt;- 1000 director_counts &lt;- sci_fiDirectorsScores |&gt; filter(successRating &gt; success_threshold) |&gt; group_by(primaryName) |&gt; summarise(movie_count = n(), .groups = ‘drop’) |&gt; arrange(desc(movie_count))\nactors &lt;- NAME_BASICS |&gt; separate_longer_delim(primaryProfession, “,”) |&gt; separate_longer_delim(knownForTitles, “,”) |&gt; filter(primaryProfession == “actor”) |&gt; filter(!is.na(birthYear), is.na(deathYear)) |&gt; rename(“tconst” = “knownForTitles”) |&gt; select(primaryName, birthYear, deathYear, tconst) sci_fi &lt;- TITLE_BASICS |&gt; filter(titleType == “movie” & genres == “Sci-Fi”) |&gt; select(tconst, primaryTitle, startYear, endYear) sci_fiActors &lt;- inner_join(sci_fi, actors, by = “tconst”) sci_fiActorsScores &lt;- sci_fiActors |&gt; left_join(TITLE_RATINGS |&gt; select(tconst, successRating), by = “tconst”) success_threshold &lt;- 1000 actor_counts &lt;- sci_fiActorsScores |&gt; filter(successRating &gt; success_threshold) |&gt; group_by(primaryName) |&gt; summarise(movie_count = n(), .groups = ‘drop’) |&gt; arrange(desc(movie_count))\ndirectors_to_plot &lt;- c(“Christopher Nolan”, “Anthony Russo”, “James Cameron”, “George Lucas”, “Denis Villeneuve”) director_plot &lt;- director_counts |&gt; filter(primaryName %in% directors_to_plot) ggplot(director_plot, aes(x = primaryName, y = movie_count)) + geom_bar(stat = “identity”) + theme_minimal() + labs(title = “Successful Movie Count by Director”, x = “Director”, y = “Number of Successful Movies”)\nlibrary(knitr) actor_table &lt;- kable(actor_counts, caption = “Successful Movie Count by Actor”, col.names = c(“Actor”, “Number of Successful Movies”), format = “markdown”)\n#Task 6: Finding a Classic Movie to Remake sci_fi &lt;- TITLE_BASICS |&gt; filter(titleType == “movie” & genres == “Sci-Fi”) |&gt; select(tconst, primaryTitle, startYear, endYear) sci_fiHighestRatings &lt;- sci_fi |&gt; left_join(TITLE_RATINGS |&gt; select(tconst, successRating), by = “tconst”) |&gt; arrange(desc(successRating)) |&gt; filter(startYear &lt;= 1999) |&gt; print()\n#Task 7: Write and Deliver Your Pitch"
  },
  {
    "objectID": "mp01.html",
    "href": "mp01.html",
    "title": "Mini Project 1",
    "section": "",
    "text": "Text goes here."
  }
]