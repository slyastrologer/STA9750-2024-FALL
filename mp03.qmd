---
title: "mp03"
author: "Hassan Adolphus"
editor: visual
---
# Introduction
In this project, we will use election data in combination with geographical data to analyze and visualize the results of every presidential election since 1976. We will then conduct an analysis as to whether the electoral college system currently in place in the United States is fair, and determine if an alternative system should be implemented.



## TASK 1
We will begin our work by importing the necessary libraries:

```{r}
library(dplyr)
library(tidyr)
library(stringr)
library(httr)
library(tidyverse)
library(ggplot2)
```

Next, we will pull in the geographical data for congressional maps in the United States between 1976 and 2012.

```{r}
### TASK 1: Download Congressional Shapefiles 1976-2012 ###

# Base URL for downloading congressional shapefiles
base_url <- "https://github.com/JeffreyBLewis/congressional-district-boundaries"

# Define the range of congresses (from 1976 to 2012)
congresses <- 94:113

# Define the directory where the shapefiles will be saved
download_dir <- "congress_shapefiles"
if (!dir.exists(download_dir)) dir.create(download_dir)

# Function to download the shapefile if not already downloaded
download_shapefile <- function(congress, base_url, download_dir) {
  # Format the Congress number ("94th", "95th", etc.)
  congress_str <- paste0(congress, "th")
  # Construct the URL for the specific shapefile (adjust naming convention as needed)
  file_url <- paste0(base_url, congress_str, "/shapefile.zip")
  # Define the local filename for the zip file
  zip_file <- file.path(download_dir, paste0(congress_str, "_shapefile.zip"))
  # Check if the file already exists
  if (!file.exists(zip_file)) {
    message(paste("Downloading:", congress_str))
    GET(file_url, write_disk(zip_file, overwrite = TRUE))
  } else {
    message(paste("File for Congress", congress_str, "already exists. Skipping download."))
  }
}

# Loop through all Congresses from 94th to 113th
for (congress in congresses) {
  download_shapefile(congress, base_url, download_dir)
}

# Optional: After download, unzip all shapefiles if necessary
unzip_shapefiles <- function(download_dir) {
  zip_files <- list.files(download_dir, pattern = "\\.zip$", full.names = TRUE)
  for (zip_file in zip_files) {
    # Define the target folder for extraction
    unzip_dir <- gsub("\\.zip$", "", zip_file)
    if (!dir.exists(unzip_dir)) dir.create(unzip_dir)
    # Unzip the file
    unzip(zip_file, exdir = unzip_dir)
  }
}

# Optional: After downloading, uncomment the following line to unzip files
# unzip_shapefiles(download_dir)

message("Download process completed!")
```

The code above retrieves and downloads the shapefiles for the national congressional district maps between 1976 and 2012. It also names the files based on which congress they represent, unzips the files, and saves them to a users' local ssd. If the user already has a copy of the data on their local ssd, this code is skipped and a message is displayed stating the data has already been downloaded. 



## TASK 2
Now, we will pull in the geographical data for congressional maps in the United States between 2012 and 2022. 

```{r}
### TASK 2: Download Congressional Shapefiles 2014-2022 ###

# Base URL for the U.S. Census Bureau Congressional Shapefiles
base_url <- "https://www.census.gov/geographies/mapping-files/time-series/geo/tiger-line-file.html"

# Define the range of congresses (113th to 117th Congresses correspond to years 2014-2022)
congresses <- 113:117  # From 113th Congress (2013-2015) to 117th Congress (2021-2023)

# Define the directory where the shapefiles will be saved
download_dir <- "congress_shapefiles"
if (!dir.exists(download_dir)) dir.create(download_dir)

# Function to download the shapefile if not already downloaded
download_shapefile <- function(congress, base_url, download_dir) {
  # Format the Congress number (e.g., "113th", "114th", etc.)
  congress_str <- paste0(congress, "th")
  # Construct the URL for the specific shapefile (adjust naming convention as needed)
  file_url <- paste0(base_url, "congressional", congress_str, "/shapefile.zip")
  # Define the local filename for the zip file
  zip_file <- file.path(download_dir, paste0("congress_", congress_str, "_shapefile.zip"))
  # Check if the file already exists
  if (!file.exists(zip_file)) {
    message(paste("Downloading:", congress_str))
    GET(file_url, write_disk(zip_file, overwrite = TRUE))
  } else {
    message(paste("File for Congress", congress_str, "already exists. Skipping download."))
  }
  return(zip_file)
}

# Function to unzip the downloaded shapefiles with error handling
unzip_shapefiles <- function(zip_file) {
  if (file.exists(zip_file)) {
    unzip_dir <- gsub("\\.zip$", "", zip_file)  # Remove .zip extension for folder name
    # Check if the directory already exists
    if (!dir.exists(unzip_dir)) {
      dir.create(unzip_dir)  # Create the directory for extraction
    }
    # Try unzipping the file, and catch any errors
    tryCatch({
      message(paste("Unzipping:", zip_file))
      unzip(zip_file, exdir = unzip_dir)
      message(paste("Unzipped successfully:", zip_file))
    }, error = function(e) {
      warning(paste("Failed to unzip:", zip_file, "\nError message:", e$message))
    })
  } else {
    warning(paste("The file does not exist:", zip_file))
  }
}

# Loop through all Congresses from 113th to 117th
for (congress in congresses) {
  zip_file <- download_shapefile(congress, base_url, download_dir)
  unzip_shapefiles(zip_file)
}

message("Download and unzip process completed!")
```

The code above retrieves and downloads the shapefiles for the national congressional district maps between 2012 and 2022. It also names the files based on the naming convention from task 1, unzips the files, and saves them to a users' local ssd. If the user already has a copy of the data on their local ssd, this code is skipped and a message is displayed stating the data has already been downloaded. 



## TASK 3
Next, we will begin exploring our congressional and presidential election data. After importing the congressional and presidential election datasets - courtesy of [the MIT Election Lab](https://electionlab.mit.edu/data#data) - we will first determine which states have lost the most congressional seats since 1976. Then, we will specifically look at election outcomes in New York State to determine if those outcomes would have been different under an alternative vote-tallying system. Finally, we will examine whether presidential candidates tend to do better or worse than their congressional counterparts in general elections. 

```{r}
### TASK 3: Exploration of Vote Count Data ###

library(readr)
housevotes1976to2022 <- read_csv("dataverse_files/1976-2022-house.csv")
library(readr)
presidentvotes1976to2020 <- read_csv("dataverse_files2/1976-2020-president.csv")

### States that have gained and lost the most seats in the US House of Representatives between 1976 and 2022. ###

statedistricts_1976to2022 <- housevotes1976to2022 %>%
  group_by(year, state) %>%
  summarise(num_districts = n_distinct(district))
statedistricts_change <- statedistricts_1976to2022 %>%
  spread(key = year, value = num_districts) %>%
  rename(districts_1976 = `1976`, districts_2022 = `2022`) %>%
  mutate(districts_change = districts_2022 - districts_1976) %>%
  arrange(desc(districts_change))
view(statedistricts_change)

### Elections in our data where the election would have had a different outcome if the “fusion” system was not used and candidates only received the votes from their “major party line” (Democrat or Republican). ###

newyorkvotes_1976to2022 <- housevotes1976to2022 %>%
  group_by(year, state) %>%
  filter(state == "NEW YORK")

nycandidatevotes_total <- newyorkvotes_1976to2022 %>%
  group_by(candidate, year) %>%
  mutate(candidatetotal = sum(candidatevotes, na.rm = TRUE)) %>%
  ungroup()
nycandidatevotes_winner <- nycandidatevotes_total %>%
  group_by(year, district) %>%
  slice_max(candidatetotal, n = 1) %>%
  select(year, candidate, candidatetotal) %>%
  distinct(candidate, .keep_all = TRUE)
altnycandidatevotes_total <- newyorkvotes_1976to2022 %>%
  group_by(candidate, year) %>%
  mutate(candidatetotal = sum(candidatevotes, na.rm = TRUE)) %>%
  ungroup() %>%
  filter(party == "DEMOCRAT" | party == "REPUBLICAN")
altnycandidatevotes_winner <- nycandidatevotes_total %>%
  group_by(year, district) %>%
  slice_max(candidatevotes, n = 1) %>%
  select(year, candidate, candidatevotes)

if (any(nycandidatevotes_winner$candidate != altnycandidatevotes_winner$candidate)) {
  print("There are elections that would have had a different outcome.")
} else {
  print("There are not elections that would have had a different outcome.")
}

### Do presidential candidates run ahead or run behind congressional candidates? ###

congressionalpartyvotes <- housevotes1976to2022 %>%
  filter(party == "DEMOCRAT" | party == "REPUBLICAN") %>%
  group_by(year, party) %>%
  summarize(total_votes_congressional = sum(candidatevotes), .groups = 'drop')
presidentialpartyvotes <- presidentvotes1976to2020 %>%
  rename("party" = "party_detailed") %>%
  filter(party == "DEMOCRAT" | party == "REPUBLICAN") %>%
  group_by(year, party) %>%
  summarize(total_votes_presidential = sum(candidatevotes), .groups = 'drop')
congressionalandpresidential <- merge(congressionalpartyvotes, presidentialpartyvotes, by = c("year", "party"), all.x = TRUE)
congressionalandpresidential$iscongresshigher <- congressionalandpresidential$total_votes_congressional > congressionalandpresidential$total_votes_presidential
view(congressionalandpresidential)
```

To answer our first question, we must calculate the difference in how many congressional seats a state had in 1976 vs 2022. We start by grouping the amount of congressional seats by state for those two years, then we subtract the 2022 value from the 1976 value. A trend we can see in the data is that since 1976, southern states have been gaining congressional districts, while northern states have been loosing them.

To answer our second question, we must create two scenarios with our congressional data. In the first scenario, we examine election winners as they are with third party votes looped into the major political parties' votes. In the second scenario, we leave third party votes as standalone datapoints. We then add a prompt that overlays the two datasets, and if there are differing election winners between the two datasets, a phrase declaring there are alternative election winners is output. Thus, based on the code output, there are elections present in our dataset in which the outcomes would have been different under an alternative vote-tallying system.

To answer our final question, we must examine both our congressional and presidential datasets in tandem. We start by aggregating the votes congressional and presidential candidates have gotten in each election since 1976. We then merge our two datasets and add a conditional variable that determines if a congressional candidate is running ahead or behind of the presidential candidate from their same party in an election. Based on the output, we can determine that a presidential candidate's votes have generally tracked in line with a congressional candidate's votes of the same party in general election years. 



## TASK 4
Now, we will begin automating the extraction of shapefiles from zipfiles, using a shapefile of New York City as an example.

```{r}
### TASK 4: Automate Zip File Extraction ###

library(ggplot2)
library(sf)

if(!file.exists("nyc_borough_boundaries.zip")){
  download.file("https://data.cityofnewyork.us/api/geospatial/tqmj-j8zm?method=export&format=Shapefile", 
                destfile="nyc_borough_boundaries.zip")
}

# Define the function to read .shp file from a zip archive
read_shp_from_zip <- function(zip_file) {
  # Create a temporary directory
  td <- tempdir(); 
  # Extract the contents of the zip file
  zip_contents <- unzip("nyc_borough_boundaries.zip", 
                        exdir = td)
  # Identify the .shp file among the extracted contents
  fname_shp <- zip_contents[grepl("shp$", zip_contents)]
  # Read the shapefile into R using st_read
  nyc_sf <- st_read(fname_shp)
  return(nyc_sf)
}

nyc_sf <- read_shp_from_zip("nyc_borough_boundaries.zip")

ggplot(nyc_sf, 
       aes(geometry=geometry,
           fill = shape_area)) + 
  geom_sf()
```

In the code above, we are pulling in shapefile data from the City of New York into R. We are then coloring the shapefile data based on the area of New York City's boroughs. The code in this task serves as a smaller-scale example of how we can create a similar map coloring a national shapefile based on election results. 



## TASK 5
Next, we will adapt our code from the previous task to color a national shapefile with the results of the 2000 election. We will start by importing a national shapefile from the census website, then we will manipulate our presidential data from earlier to extract the results of the Democratic and Republican parties in the 2000 presidential election. Finally, we will use our extracted results from the 2000 election to fill in our shapefile with the appropriate colors for the Democratic (blue) and Republican (red) parties.

```{r}
### TASK 5: Chloropleth Visualization of the 2000 Presidential Election Electoral College Results ###

library(ggplot2)
library(sf)

if(!file.exists("state_boundaries.zip")){
  download.file("https://www2.census.gov/geo/tiger/GENZ2018/shp/cb_2018_us_state_500k.zip", 
                destfile="state_boundaries.zip")
}

# Define the function to read .shp file from a zip archive
read_shp_from_zip <- function(zip_file) {
  # Create a temporary directory
  td <- tempdir(); 
  # Extract the contents of the zip file
  zip_contents <- unzip("state_boundaries.zip", 
                        exdir = td)
  # Identify the .shp file among the extracted contents
  fname_shp <- zip_contents[grepl("shp$", zip_contents)]
  # Read the shapefile into R using st_read
  states_sf <- st_read(fname_shp)
  return(states_sf)
}

states_sf <- read_shp_from_zip("state_boundaries.zip")

# Reshape the wholistic dataset with an epmhasis on the 2000 election
presidentvotes2000_summary <- presidentvotes1976to2020 %>%
  filter(year == 2000, party_detailed %in% c("DEMOCRAT", "REPUBLICAN")) %>%
  group_by(state, party_detailed) %>%
  summarise(candidatevotes = sum(candidatevotes), .groups = "drop") %>%
  pivot_wider(names_from = party_detailed, values_from = candidatevotes, values_fill = list(candidatevotes = 0)) %>%
  rename(Democratic_votes = DEMOCRAT, Republican_votes = REPUBLICAN) %>%
  left_join(
    presidentvotes1976to2020 %>%
      filter(year == 2000) %>%
      select(state, totalvotes) %>%
      distinct(),
    by = "state"
  ) %>%
  mutate(
    Winner = case_when(
      Democratic_votes > Republican_votes ~ "DEMOCRAT",
      Republican_votes > Democratic_votes ~ "REPUBLICAN",
      TRUE ~ "TIE"
    )
  ) %>%
  select(state, Democratic_votes, Republican_votes, Total_votes = totalvotes, Winner)

# Merge the shapefiles and presidential election data
states_sf <- states_sf %>%
  rename("state" = "NAME")
states_sf$state <- toupper(states_sf$state)
states_sf <- states_sf %>%
  left_join(presidentvotes2000_summary, by = c("state"))

# Plot the presidential election data and make the map window larger
ggplot(data = states_sf) +
  geom_sf(aes(fill = Winner)) +
  scale_fill_manual(values = c("DEMOCRAT" = "blue", "REPUBLICAN" = "red")) +
  theme_minimal() +
  labs(title = "US Election Results by State (2000)", fill = "Party") +
  theme(legend.position = "bottom") +
  coord_sf(xlim = c(-130, -65), ylim = c(24, 50), expand = FALSE)
```



## TASK 7
Finally, we will evaluate the fairness of different electoral allocation schemes. We will use a combination of our presidential election data from R and [an online electoral map generator](https://www.270towin.com) to examine three electoral allocation schemes in the context of the 2016 general election; state-wide winner takes all, nation-wide winner takes all, and state-wide proportional vote. 

```{r}
### TASK 7: Evaluating Fairness of ECV Allocation Schemes ###

# Modify the code to display the 2016 election
presidentvotes2016_summary <- presidentvotes1976to2020 %>%
  filter(year == 2016, party_detailed %in% c("DEMOCRAT", "REPUBLICAN")) %>%
  group_by(state, party_detailed) %>%
  summarise(candidatevotes = sum(candidatevotes), .groups = "drop") %>%
  pivot_wider(names_from = party_detailed, values_from = candidatevotes, values_fill = list(candidatevotes = 0)) %>%
  rename(Democratic_votes = DEMOCRAT, Republican_votes = REPUBLICAN) %>%
  left_join(
    presidentvotes1976to2020 %>%
      filter(year == 2016) %>%
      select(state, totalvotes) %>%
      distinct(),
    by = "state"
  ) %>%
  mutate(
    Winner = case_when(
      Democratic_votes > Republican_votes ~ "DEMOCRAT",
      Republican_votes > Democratic_votes ~ "REPUBLICAN",
      TRUE ~ "TIE"
    )
  ) %>%
  select(state, Democratic_votes, Republican_votes, Total_votes = totalvotes, Winner)
print(presidentvotes2016_summary)
```

Based on our data and the electoral maps we can produce from that data, we can identify some valuable insights based on differing electoral apportioning schemes: 

1. Under a state-wide winner takes all (statewide popular vote), the winner of the 2016 election would still be Donald Trump with 305 electoral votes. 
2. Under a nation-wide winner takes all (nationwide popular vote), the winner of the 2016 election would have been Hillary Clinton with over 65 million votes. 
3. Under a state-wide proportional vote, Hillary Clinton would have won the 2016 election.

Using these findings, we can craft the following "fact check":

Critics of a national popular vote often argue against adopting statewide proportional allocation of electoral votes in U.S. presidential elections, claiming it would undermine the will of the people or distort results in favor of large urban areas, which tend to lean democratic. However, the current system, in which most states use a "winner-takes-all" method, can lead to significant discrepancies between the popular vote and the final electoral outcome, as seen in the 2016 election.

Based on an analysis of alternative schemes for electoral vote allocation, I believe a statewide proportional electoral vote scheme provides a fairer representation of the national popular vote in presidential elections. In the 2016 election, Donald Trump won the Electoral College despite losing the popular vote by nearly 3 million votes. This discrepancy was allowed to occur because of the "winner-takes-all" methodology used by a majority of states, in which a candidate can win all of a state's electoral votes with just a slim margin of victory. 

Under a proportional allocation scheme, electoral votes would have been distributed more in line with the popular vote totals, ensuring that both popular will and state representation are reflected and respected. Under a proportional system, Hillary Clinton's victory in larger states like California and Texas would have earned her a greater share of electoral votes, while Trump's victories in swing states like Wisconsin and Michigan would have translated to a more accurate electoral distribution instead of an outright victory. This system not only preserves the federal structure of U.S elections, but also increases voter engagement as more people's votes across the country would contribute to the electoral outcome. 
